        parse Main
        # region basic information: name, summary, platform, publishers, release date
        name => "//div[has-class('product_title')]/a/h1/text()"
        summary => "//span[has-class('blurb_expanded')]/text()" or "//span[has-class('data')]/span/text()"
        platform => "//span[has-class('platform')]/a/text()" or "//span[has-class('platform')]/text()"
        publishers => "//li[has-class('publisher')]/span[has-class('data')]/a/text()"
        releaseDate => "//li[has-class('release_data')]/span[has-class('data')]/text()"
        metaScore => "//div[has-class('metascore_summary')]/div/a/div/span/text()"
        userScore => "//div[has-class('userscore_wrap')]/a/div/text()"
        metaCritics => "//div[has-class('critic_reviews_module')]/div[has-class('body')]/div/div/ol/li/div"
        for metaCritic in metaCritics
            score => "span[has-class('data')]/a/span/span[has-class('count')]/text()"
        metaCritics => "//div[has-class('user_reviews_module')]/div[has-class('body')]/div/div/ol/li/div"
        meta_review_link = "//div[has-class('metascore_summary')]/div/a/@href"
        user_review_link = "//div[has-class('userscore_wrap')]/a/@href"
        """
         todo:
         problem Statement: some games with numerous discussion (For example: TLOU2
         `https://www.metacritic.com/game/playstation-4/the-last-of-us-part-ii`, which is a game having 70000+ user
         reviews) will cause a heavy load to me and crawler (Because Metacritic sucks, it even doesn't use AJAX for
         loading remarks. These games cause many approaches ,which work well for many games, works badly for them.
         For example, since Metacritic sucks, we should reload/refresh user review page for many times to reveal these
         remarks. Also, since it could be a heavy load for te database, I only record 2000~3000 remarks uniformally
         from Positive, Mixed and Negative remarks. And according to my observation, many master pieces, which ought
         to have numerous discussion, only have 1000+ remarks. So we don't need to worry whether using a high load/ low
         load strategies will cause bad result)

         Condition:  Low Load when the total number of remarks is less than 3000.
                     High Load when the total number of remarks is less than 3000.

        Methods: 1. High Load should consider to reload until the page reviews well
                 2. We only takes at most 1000 green (Positive), 1000 (Mixed), 1000 Negative (Negative) reviews.
         """



        parse_meta_review:

        all_li = "//ol[has-class('critic_reviews')]")[0].xpath("li[has-class('critic_review')]"
        for li in all_li
            review_section => "div/div/div/div/div/div[has-class('review_section')]"
            review_stats => "div[has-class('review_stats')]"
            review_critics => "div[has-class('review_critic')]"
            date => "div[has-class('date')]/text()"
            source => "div[has-class('source')]/text()"
            source => "div[has-class('source')]/a/text()"
            grade => "div[has-class('review_grade')]/div/text()"
            review_body => "div[has-class('review_body')]/text()"
            review_body_span => "div[has-class('review_body')]/span/text()"
            review_body_span_expanded => "div[has-class('review_body')]/span/span[has-class('blurb_expanded')]/text()"



    parse_user_review_low_load:
        all_li => "//ol[has-class('user_reviews')]/li[has-class('user_review')]"
        for li in all_li
            review_section => "div/div/div/div/div/div[has-class('review_section')]"
            review_stats => "div[has-class('review_stats')]"
            review_critics => "div[has-class('review_critic')]"
            date => "div[has-class('date')]/text()"
            source => review_critics.xpath("div[has-class('name')]/text()" or
            source => review_critics.xpath("div[has-class('name')]/a/text()"
            grade => "div[has-class('review_grade')]/div/text()"
            review_body => "div[has-class('review_body')]/text()"
            review_body_span => "div[has-class('review_body')]/span/text()"
            review_body_span_expanded => "div[has-class('review_body')]/span/span[has-class('blurb_expanded')]/text()"
            next_page_url => "//ul[has-class('pages')]/li[span[has-class('page_num')]]/following-sibling::li[1]/a/@href"


    def parse_user_review_high_load(self, response):
        all_review_li =>"//ol[has-class('score_counts')]/li[has-class('score_count')]"
        positive_link => all_review_li[0] "div[has-class('count_wrap')]/span[has-class('data')]/a/@href"
        mixed_link => all_review_li[1] "div[has-class('count_wrap')]/span[has-class('data')]/a/@href"
        negative_link => all_review_li[2] "div[has-class('count_wrap')]/span[has-class('data')]/a/@href"

